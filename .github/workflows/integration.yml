name: Integrate

on:
  push:
    branches: [ main ]

jobs:
  # test_commit:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: build an image for the react app
  #       run: docker build -t lyoshas/react-test -f ./client/Dockerfile.dev ./client
  #     - name: run react tests
  #       run: docker run -e CI=true lyoshas/react-test npm test
  #     - name: create a production version for the react project
  #       run: docker build -t lyoshas/multi-client ./client
  #     - name: create a production version for nginx
  #       run: docker build -t lyoshas/multi-nginx ./nginx
  #     - name: create a production version for API
  #       run: docker build -t lyoshas/multi-server ./server
  #     - name: create a production version for the worker
  #       run: docker build -t lyoshas/multi-worker ./worker
  #     - name: log in to Docker Hub
  #       run: |
  #         echo "${{ secrets.DOCKER_PASSWORD }}" | \
  #         docker login -u "${{ secrets.DOCKER_ID }}" --password-stdin
  #     - name: push lyoshas/multi-client to Docker Hub
  #       run: docker push lyoshas/multi-client
  #     - name: push lyoshas/multi-nginx to Docker Hub
  #       run: docker push lyoshas/multi-nginx
  #     - name: push lyoshas/multi-server to Docker Hub
  #       run: docker push lyoshas/multi-server
  #     - name: push lyoshas/multi-worker to Docker Hub
  #       run: docker push lyoshas/multi-worker
  deploy:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CLOUD_CONFIG_FILE_CONTENTS: ${{ secrets.GOOGLE_CLOUD_CONFIG_FILE_CONTENTS }}
    steps:
      # - name: Check gcloud version
      #   run: gcloud --version
      # - name: Install gcloud (1/4)
      #   run: sudo apt-get install apt-transport-https ca-certificates gnupg
      # - name: Install gcloud (2/4)
      #   run: echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      # - name: Install gcloud (3/4)
      #   run: curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      # - name: Install gcloud (4/4)
      #   run: sudo apt-get update && sudo apt-get install google-cloud-cli
      - name: Create a file that stores Google Cloud SSH configuration
        run: echo "$GOOGLE_CLOUD_CONFIG_FILE_CONTENTS" > google-cloud-config.json
      - name: Activate this configuration file
        run: gcloud auth activate-service-account --key-file=google-cloud-config.json
      - name: Connect to the remote VM and deploy the project
        run: >-
          gcloud compute ssh 
          --zone "europe-north1-a" 
          "${{ secrets.GOOGLE_CLOUD_DEFAULT_USER }}@instance-1" 
          --project "healthy-display-371312" 
          -- '
          cd ./multi-docker &&
          git pull origin main &&
          docker-compose -f docker-compose-prod.yml up -d --build
          ' 
      # - name: Change directory to ./multi-docker
      #   run: cd ./multi-docker
      # - name: Get the latest changes to the remote VM
      #   run: git pull origin main
      # - name: Start up the project
      #   run: docker-compose -f docker-compose-prod.yml up -d --build
    # env:
      # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    # steps:
      # - uses: actions/checkout@v2
      # - name: check docker version before the update
      #   run: docker --version
      # - name: Update docker-compose version
      #   run: sudo curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sudo sh
      # - name: check docker version after the update
      #   run: docker --version
      # - name: show docker context create ecs help
      #   run: docker context create ecs --help
      # - name: create AWS ECS Docker context
      #   run: docker context create ecs myecscontext --from-env
      # - name: set the newly created context as the default
      #   run: docker context use myecscontext
      # - name: run docker-compose-prod.yml
      #   run: docker compose -f docker-compose-prod.yml up --build -d
      # - name: debugging
      #   uses: mxschmitt/action-tmate@v3