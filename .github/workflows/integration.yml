name: Integrate

on:
  push:
    branches: [ main ]

jobs:
  # test_commit:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: build an image for the react app
  #       run: docker build -t lyoshas/react-test -f ./client/Dockerfile.dev ./client
  #     - name: run react tests
  #       run: docker run -e CI=true lyoshas/react-test npm test
  #     - name: create a production version for the react project
  #       run: docker build -t lyoshas/multi-client ./client
  #     - name: create a production version for nginx
  #       run: docker build -t lyoshas/multi-nginx ./nginx
  #     - name: create a production version for API
  #       run: docker build -t lyoshas/multi-server ./server
  #     - name: create a production version for the worker
  #       run: docker build -t lyoshas/multi-worker ./worker
  #     - name: log in to Docker Hub
  #       run: |
  #         echo "${{ secrets.DOCKER_PASSWORD }}" | \
  #         docker login -u "${{ secrets.DOCKER_ID }}" --password-stdin
  #     - name: push lyoshas/multi-client to Docker Hub
  #       run: docker push lyoshas/multi-client
  #     - name: push lyoshas/multi-nginx to Docker Hub
  #       run: docker push lyoshas/multi-nginx
  #     - name: push lyoshas/multi-server to Docker Hub
  #       run: docker push lyoshas/multi-server
  #     - name: push lyoshas/multi-worker to Docker Hub
  #       run: docker push lyoshas/multi-worker
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
      - uses: actions/checkout@v2
      - name: check docker version before the update
        run: docker --version
      - name: Update docker-compose version
        run: sudo curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sudo sh
      - name: check docker version after the update
        run: docker --version
      - name: show docker context create ecs help
        run: docker context create ecs --help
      - name: create AWS ECS Docker context
        run: docker context create ecs myecscontext --from-env
      - name: set the newly created context as the default
        run: docker context use myecscontext
      - name: run docker-compose-prod.yml
        run: docker compose -f docker-compose-prod.yml up --build -d
      - name: debugging
        uses: mxschmitt/action-tmate@v3